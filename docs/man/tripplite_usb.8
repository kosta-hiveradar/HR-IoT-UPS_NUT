'\" t
.\"     Title: tripplite_usb
.\"    Author: [see the "AUTHORS" section]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 08/08/2025
.\"    Manual: NUT Manual
.\"    Source: Network UPS Tools 2.8.4
.\"  Language: English
.\"
.TH "TRIPPLITE_USB" "8" "08/08/2025" "Network UPS Tools 2\&.8\&.4" "NUT Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
tripplite_usb \- Driver for older Tripp Lite USB UPSes (not PDC HID)
.SH "SYNOPSIS"
.sp
\fBtripplite_usb\fR \-h
.sp
\fBtripplite_usb\fR \-a \fIUPS_NAME\fR [\fIOPTIONS\fR]
.SH "SUPPORTED HARDWARE"
.sp
This driver should work with older Tripp Lite UPSes which are detected as USB HID\-class devices, but are not true HID Power\-Device Class devices\&. So far, the devices supported by tripplite_usb have product ID \fI0001\fR, and the newer units (such as those with "LCD" in the model name) with product ID \fI2001\fR require the \fBusbhid-ups\fR(8) driver instead\&.
.sp
Please report success or failure to the nut\-upsuser mailing list\&. A key piece of information is the protocol number, returned in ups\&.firmware\&.aux\&. Also, be sure to turn on debugging (\-DDD) for more informative log messages\&.
.sp
If your Tripp Lite UPS uses a serial port, you may wish to investigate the \fBtripplite\fR(8) or \fBtripplitesu\fR(8) drivers\&.
.sp
This driver has been tested with the following models:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
INTERNETOFFICE700
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
OMNIVS1000
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
OMNIVS1500XL (some warnings)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
SMART700USB
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
SMART1500RM2U
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
SMART2200RMXL2U
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
SMART3000RM2U
.RE
.sp
If you have used Tripp Lite\(cqs PowerAlert software to connect to your UPS, there is a good chance that tripplite_usb will work if it uses one of the following protocols:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Protocol 0004
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Protocol 1001
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Protocol 2001
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Protocol 3003
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Protocol 3005
.RE
.sp
On the other hand, if the web page for your UPS on the Tripp\-Lite website says "HID\-compliant USB port also enables direct integration with built\-in power management and auto\-shutdown features of Windows and MAC OS X", then you should use the \fBusbhid-ups\fR(8) driver instead\&.
.SH "EXTRA ARGUMENTS"
.sp
This driver supports the following optional settings in the \fBups.conf\fR(5) file (or with \fI\-x\fR on the command line):
.PP
\fBport =\fR \fIstring\fR
.RS 4
Required option for all NUT drivers\&. Some
\fIvalue\fR
must be set, typically
\fBauto\fR
for drivers that handle USB connections\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
This could be a device filesystem path like
/dev/usb/hiddev0
but current use of libusb API precludes knowing and matching by such identifiers\&. They may also be inherently unreliable (dependent on re\-plugging and enumeration order)\&. At this time the actual
\fIvalue\fR
is ignored, but syntactically some
\fIport\fR
configuration must still be there\&.
.sp .5v
.RE
.RE
.sp
It is possible to control multiple UPS units simultaneously by running several instances of this driver, provided they can be uniquely distinguished by setting some combination of the \fBvendor\fR, \fBproduct\fR, \fBvendorid\fR, \fBproductid\fR, \fBserial\fR, \fBbus\fR and/or \fBdevice\fR options detailed below\&. For devices or operating systems that do not provide sufficient information, the \fBallow_duplicates\fR option can be of use (limited and risky!)
.PP
\fBvendorid =\fR \fIregex\fR, \fBproductid =\fR \fIregex\fR, \fBvendor =\fR \fIregex\fR, \fBproduct =\fR \fIregex\fR, \fBserial =\fR \fIregex\fR
.RS 4
Select a specific UPS, in case there is more than one connected via USB\&. Each option specifies an extended regular expression (see
\fBregex\fR(7)
for more information on regular expressions), which must match the UPS\(cqs entire respective
vendor/product/serial
string values (minus any surrounding whitespace), or the whole 4\-digit hexadecimal code for
vendorid
and
productid\&.
.sp
Try
\fBlsusb\fR(8)
or running this NUT driver with
\-DD
command\-line argument for finding out the strings to match\&.
.sp
Examples:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\-x vendor="Foo\&.Corporation\&.*"
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\-x vendorid="051d*"
(APC)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\-x product="\&.*(Smart|Back)\-?UPS\&.*"
.RE
.RE
.PP
\fBbus =\fR \fIregex\fR
.RS 4
OPTIONAL, NOT RECOMMENDED\&.
.sp
Select a UPS on a specific USB bus or group of buses\&. The argument is a regular expression that must match the bus name where the UPS is connected (e\&.g\&.
bus="002"
or
bus="00[2\-3]") as seen on Linux in
/sys/bus/usb/devices
or
\fBlsusb\fR(8); including leading zeroes\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
Bus numbers are not guaranteed by the OS to be stable across re\-boots, kernel driver reloads or device re\-plugging (e\&.g\&. changing visible population of USB hubs)\&.
.sp .5v
.RE
.RE
.PP
\fBdevice =\fR \fIregex\fR
.RS 4
OPTIONAL, NOT RECOMMENDED\&.
.sp
Select a UPS on a specific USB device or group of devices\&. The argument is a regular expression that must match the device name where the UPS is connected (e\&.g\&.
device="001"
or
device="00[1\-2]") as seen on Linux in
/sys/bus/usb/devices
or
\fBlsusb\fR(8); including leading zeroes\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
Device numbers are not guaranteed by the OS to be stable across re\-boots or device re\-plugging\&.
.sp .5v
.RE
.RE
.PP
\fBbusport =\fR \fIregex\fR
.RS 4
OPTIONAL, NOT RECOMMENDED\&.
.sp
If supported by the hardware, OS and libusb on the particular deployment, this option should allow to specify physical port numbers on an USB hub, rather than logical
device
enumeration values, and in turn \(em this should be less volatile across reboots or re\-plugging\&. The value may be seen in the USB topology output of
lsusb \-tv
on systems with that tool, for example\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
This option is not practically supported by some NUT builds (it should be ignored with a warning then), and not by all systems that NUT can run on\&.
.sp .5v
.RE
.RE
.PP
\fBallow_duplicates\fR
.RS 4
OPTIONAL, NOT RECOMMENDED\&.
.sp
If you have several UPS devices which may not be uniquely identified by the options above (e\&.g\&. only
\fIVID:PID\fR
can be discovered there), this flag allows each driver instance where it is set to take the first match if available, or proceed to try another\&.
.sp
Normally the driver initialization would abort at this point claiming "Resource busy" or similar error, assuming that the otherwise properly matched device is unique \(em and some other process already handles it\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBWarning\fR
.ps -1
.br
This feature is inherently non\-deterministic! The association of driver instance name to actual device may vary between runs!
.sp
If you only care to know that
\fBat least\fR
one of your no\-name UPSes is online, this option can help\&.
.sp
If you must really know
\fBwhich\fR
one, it will not!
.sp .5v
.RE
.RE
.PP
\fBusb_set_altinterface =\fR \fIbAlternateSetting\fR
.RS 4
Force redundant call to
usb_set_altinterface(), especially if needed for devices serving multiple USB roles where the UPS is not represented by the interface number
0
(default)\&.
.RE
.PP
\fBusb_config_index\fR, \fBusb_hid_rep_index\fR, \fBusb_hid_desc_index\fR, \fBusb_hid_ep_in\fR, \fBusb_hid_ep_out\fR
.RS 4
Force use of specific interface, endpoint, descriptor index etc\&. numbers, rather than defaulting to
\fI0\fR
(rarely other values in certain drivers for some devices known to use non\-zero numbers)\&. Specified as a hexadecimal number\&.
.sp
As a rule of thumb for
usb_hid_desc_index
discovery, you can see larger
wDescriptorLength
values (roughly 600+ bytes) in reports of
lsusb
or similar tools\&.
.RE
.PP
\fBLIBUSB_DEBUG =\fR \fIINTEGER\fR
.RS 4
Run\-time troubleshooting of USB\-capable NUT drivers can involve not only raising the common NUT debug verbosity (e\&.g\&. using the
DEBUG_MIN
setting in
\fBups.conf\fR(5)
or protocol commands to change the
driver\&.debug
value), but may also benefit from LibUSB specific debugging\&.
.sp
For the latter, you can set the
LIBUSB_DEBUG
driver option; alternatively you can classically export the environment variable
LIBUSB_DEBUG
before starting a NUT driver program (may be set and "exported" in driver init script or service method, perhaps via
\fBnut.conf\fR(5)), to a numeric value such as
4
("All messages are emitted")\&.
.sp
For more details, including the currently supported values for your version of the library, see e\&.g\&.:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
https://libusb\&.sourceforge\&.io/api\-1\&.0/
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
https://libusb\&.sourceforge\&.io/api\-1\&.0/group__libusb__lib\&.html
.RE
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\-x upsid="12345"
.RE
.sp
Select a specific UPS by its unique UPS ID\&. The argument is a regular expression that must match the UPS ID string\&. This allows for precise identification of UPS devices when multiple devices of the same make and model are connected\&. See below regarding how to read and write the ups id (unit id) using \fBupsrw\fR(8)\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNotes for tripplite_usb driver handling of common USB matching settings:\fR
.ps -1
.br
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBproduct\fR
is a regular expression to match the product string for the UPS\&. This would be useful if you have two different Tripp Lite UPS models connected to the same monitoring system, and you want to be sure that you shut them down in the correct order\&.
.sp
This regex is matched against the full USB product string as seen in
\fBlsusb\fR(8)\&. The
ups\&.model
in the
\fBupsc\fR(8)
output only lists the name after
TRIPP LITE, so to match a
\fISMART2200RMXL2U\fR, you could use the regex like
\&.*SMART2200\&.*\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The
\fBproductid\fR
is a regular expression which matches the UPS PID as four hexadecimal digits\&. So far, the only known devices that work with this driver have PID
0001\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The
\fBserial\fR
option may be or not be helpful: it does not appear that these particular Tripp Lite UPSes supported by this driver use the
iSerial
descriptor field to return a serial number\&. However, in case your unit does, you may specify it here\&.
.RE
.sp .5v
.RE
.PP
\fBoffdelay\fR
.RS 4
This setting controls the delay between receiving the "kill" command (\fI\-k\fR) and actually cutting power to the computer\&.
.RE
.PP
\fBbattery_min\fR, \fBbattery_max\fR
.RS 4
These floating\-point values correspond to the "empty" (10%) and "full" (100%) voltages of the battery\&. They are used for an approximation of the battery state\-of\-charge\&. The calculated battery\&.charge value will be clamped to the range of 10% through 100%, so the resting voltage of the charged battery can be used for
\fBbattery_max\fR, and the higher float charge voltage should not cause problems\&.
.RE
.SH "RUNTIME VARIABLES"
.PP
\fBups\&.delay\&.shutdown\fR
.RS 4
This variable is the same as the
\fIoffdelay\fR
setting, but it can be changed at runtime by
\fBupsrw\fR(8)\&.
.RE
.PP
\fBups\&.id\fR
.RS 4
Some SMARTPRO models feature an Unit ID (ups\&.id) that can be set and retrieved\&. If your UPS supports this feature, this variable will be listed in the output of
\fBupsrw\fR(8)\&.
.RE
.PP
\fBoutlet\&.1\&.switch\fR
.RS 4
Some Tripp Lite units have a switchable outlet (usually outlet #1) which can be turned on and off by writing
\fI1\fR
or
\fI0\fR, respectively, to
outlet\&.1\&.switch
with
\fBupsrw\fR(8)\&.
.sp
If your unit has multiple switchable outlets, substitute the outlet number for
\fI1\fR
in the variable name\&. Be sure to test this first \(em there is no other way to be certain that the number used by the driver matches the label on the unit\&.
.RE
.SH "KNOWN ISSUES AND BUGS"
.sp
The driver was not developed with any official documentation from Tripp Lite, so certain events may confuse the driver\&. If you observe any strange behavior, please re\-run the driver with \-DDD to increase the verbosity\&.
.sp
So far, the Tripp Lite UPSes do not seem to have a serial number or other globally unique identifier accessible through USB\&. Thus, when monitoring several Tripp Lite USB UPSes, you should use either the \fIbus\fR, \fIdevice\fR or \fIproduct\fR configuration options to uniquely specify which UPS a given driver instance should control\&.
.sp
For instance, you can easily monitor an OMNIVS1000 and a SMART1500RM2U at the same time, since they have different USB Product ID strings\&. If you have two SMART1500RM2U units, you would have to find which USB bus and device number each unit is on (via \fBlsusb\fR(8))\&.
.sp
Some of the SMART*2U models have a configurable Unit ID number, and you can now use the upsid config argument to uniquely specify which UPS a given driver instance should control\&. This allows for precise identification of UPS devices when multiple devices are connected\&. To retrieve or set the upsid, you can use the \fBupsrw\fR(8) utility\&.
.SH "AUTHORS"
.sp
Written by Charles Lepple, based on the \fBtripplite\fR(8) driver by Rickard E\&. (Rik) Faith and Nicholas Kain\&.
.sp
Please do not email the authors directly \(em use the nut\-upsdev mailing list\&.
.sp
A Tripp Lite OMNIVS1000 was graciously donated to the NUT project by Bradley Feldman (http://www\&.bradleyloritheo\&.com)
.SH "SEE ALSO"
.SS "The core driver:"
.sp
\fBnutupsdrv\fR(8)
.SS "Other drivers for Tripp\-Lite hardware:"
.sp
\fBtripplite\fR(8), \fBtripplitesu\fR(8), \fBusbhid-ups\fR(8)
.SS "Other tools:"
.sp
\fBregex\fR(7), \fBlsusb\fR(8)
.SS "Internet resources:"
.sp
The NUT (Network UPS Tools) home page: https://www\&.networkupstools\&.org/historic/v2\&.8\&.4/
